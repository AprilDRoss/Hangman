var app = require('express').createServer(), io = require('socket.io');var GameSelector = require('./lib/GameSelector');GameSelector.setup(run);function run() {	io = io.listen(app);	app.listen(80);	app.get('/', function(req, res) {		res.sendfile(__dirname + '/index.html');	});	app.get('/hangman.js', function(req, res) {		res.sendfile(__dirname + '/hangman.js');	});	app.get('/hangman.css', function(req, res) {		res.sendfile(__dirname + '/hangman.css');	});	app.get('/SocketClient.js', function(req, res) {		res.sendfile(__dirname + '/SocketClient.js');	});	app.get('/Canvas.js', function(req, res) {		res.sendfile(__dirname + '/Canvas.js');	});	var currentGame;	var currentGameSockets = [];	var currentGameUsers = [];	io.set('log level', 2);	var hangman = io.of('/hangman').on('connection', function(socket) {		socket.score = 0;		socket.name = null;		socket.getGame = function() {			if (!currentGame || currentGame.active == false) {				// start a new game				currentGame = GameSelector.get();			}			var game = currentGame.getGame();			game.score = socket.score;			socket.emit('start', game);			socket.emit('users', {				type : 'add',				users : currentGameUsers			});			currentGameSockets.push(socket);			currentGameUsers.push(socket.name);			hangman.pushToCurrentGame('users', {				type : 'add',				users : socket.name			});		};		socket.on('set name', function(name, cb) {			socket.name = name;			cb( {				ok : 'Looks good'			});		});		socket.on('letter', function(data) {			var result = null;			try {				result = currentGame.checkLetter(data, socket.name);			} catch (e) {				socket.emit('duplicateLetter', {					letter : data				});			}			if (result != null) {				if (result.type == 'failure') {					socket.score--;					socket.emit('score', socket.score);					hangman.wrongLetter(result, socket.name);				} else {					socket.score++;					socket.emit('score', socket.score);					hangman.rightLetter(result, socket.name);				}			}		});		socket.on('disconnect', function() {			currentGameSockets.splice(currentGameSockets.indexOf(socket), 1);			currentGameUsers.splice(socket.name, 1);			hangman.pushToCurrentGame('users', {				type : 'remove',				users : socket.name			});		});		socket.on('join', function() {			socket.getGame();		});	});	hangman.rightLetter = function(result, name) {		hangman.pushToCurrentGame('rightLetter', {			letter : result.letter,			game : result.game,			name : name		});		var gameOverResult = currentGame.isGameOver();		if (gameOverResult.gameOver == true) {			hangman.pushToCurrentGame('gameOver', {				type : 'success',				answer : currentGame.answer			});			hangman.reset();			return true;		}		return false;	};	hangman.wrongLetter = function(result, name) {		hangman.pushToCurrentGame('wrongLetter', {			letter : result.letter,			game : result.game,			name : name		});		var gameOverResult = currentGame.isGameOver();		if (gameOverResult.gameOver == true) {			hangman.pushToCurrentGame('gameOver', {				type : 'failure',				answer : currentGame.answer			});			hangman.reset();			return true;		}		return false;	};	hangman.reset = function() {		currentGameSockets = [];		currentGameUsers = [];	};	hangman.pushToCurrentGame = function(topic, obj) {		for ( var i = 0; i < currentGameSockets.length; i++) {			currentGameSockets[i].emit(topic, obj);		}	};};